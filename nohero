#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# HELPERS
# =======

# Print line with a prefix.
# Use typeset to use it on remote as well.
function nh_echo {
  printf "\033[0;34mNoHero |>\033[0m $@\n"
}
function nh_errcho {
  >&2 printf "\033[0;31mNoHero |>\033[0m $@\n"
}

function confirm {
  read -p "[y/n] " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    "$@"
  fi
}

# Stolen from RBENV installer script.
# Prints an error when trying to invoke `git`.
# Better than a systematic check.
if ! type -p git >/dev/null; then
  git() {
    nh_errcho "Error: 'git' is required for NoHero. Please install git and try again."
    exit 1
  }
fi

# Builds a string for remote functions that are defined in this script.
# Pass function names without the "remote_" prefix. 
# For each argument it will add the local typeset so that the remote can call it.
# And it add a call to this function.
# Functions can have arguments if you pass the whole command as a single string.
# Could be improved by not having multiple typesets if a functions is called
# multiple times.
function remote_script {
  local str="$(typeset -f nh_echo -f nh_errcho -f confirm)\n"
  for val in "$@"; do
    local cmd="remote_${val/%\ */}"
    str="${str}$(typeset -f $cmd)\nremote_${val}\n"
  done
  printf "$str"
}

# Execute local functions on remote via ssh.
# Remote is the first argument and the rest of the arguments are local functions.
# Pass function names without the "remote_" prefix. 
function remote_do {
  nh_echo "Connecting as $1. Is it OK?"
  confirm ssh -t "$1" "$(remote_script "${@:2}")"
}

# Remote functions
# ================

# These functions are prefixed with "remote_" because
# they are not meant to use locally.
# They are meant to be sent to the remote without the prefix
# using `remote_do` helper.

function remote_add_user {
  local username=nohero
  if ! id -u "$username" > /dev/null 2>&1; then
    adduser --disabled-password --shell "/bin/bash" --gecos "" "$username"
  else
    nh_echo "User '$username' already exists."
  fi
  nh_echo "Making sure '$username' is in sudo group..."
  usermod -aG sudo "$username"
  if [[ -d "/home/$username/.ssh" ]]; then
    nh_echo "Directory '.ssh' already exists."
  else
    nh_echo "Copying '/root/.ssh' directory to '/home/$username/.ssh'..."
    if [[ ! -d '/root/.ssh' ]]; then
      nh_errcho "Error: No '/root/.ssh' directory was found. NoHero works only with SSH keys connections."
      exit 1
    fi
    cp -Rfv "/root/.ssh" "/home/$username/"
    chown -R "$username:$username" "/home/$username/.ssh"
  fi
  if ! grep -q "^$username " "/etc/sudoers"; then
    # Not sure what is the cleanest way to do this.
    # Basically we only want to allow ssh keys, not password for our user.
    # So we need to make sure 'sudo' commands don't ask one.
    nh_echo "Editing '/etc/sudoers' to set NOPASSWD for '$username'."
    echo "$username ALL=(ALL) NOPASSWD:ALL" | sudo EDITOR='tee -a' visudo
  else
    nh_echo "There is already a line for '$username' in the '/etc/sudoers' file."
  fi
}

function remote_apt_update {
  nh_echo "Updating apt..."
  sudo apt update
}

function remote_install_pkg {
  if [[ $# -eq 0 ]] || [[ $# -gt 2 ]]; then
    nh_errcho "Usage: remote_install_pkg <package-name> [command-to-test-installation]"
    exit 1
  fi
  if ! type -p "${2:-$1}" >/dev/null; then
    sudo apt install "$1"
  else
    nh_echo "Package '$1' already installed. Do you want to upgrade it?"
    confirm sudo apt install "$1"
  fi
}

function remote_setup_repo {
  local repo="/home/nohero/repo.git"
  local worktree="/home/nohero/app"

  if [[ ! -d "$repo" ]]; then
    nh_echo "Creating git worktree: $worktree..."
    mkdir -p "$worktree"
  else
    nh_echo "Git worktree '$worktree' already exists."
  fi

  if [[ ! -d "$repo" ]]; then
    nh_echo "Creating git bare repository: $repo..."
    mkdir -p "$repo"
    cd "$repo"
    git init --bare
  else
    nh_echo "Git repository '$repo' already exists."
  fi

  cd "$repo"
  nh_echo "Setting up git repository..."
  git config receive.denycurrentbranch ignore

  nh_echo "Setting up git hooks..."
  cat << EOF > "$repo/hooks/post-receive"
#!/bin/sh
GIT_WORK_TREE="$worktree" git checkout -f
if [ -f "$worktree/Gemfile" ] && command -v bundle >/dev/null; then
  cd "$worktree"
  (unset GIT_DIR; exec bundle install)
  true
fi
EOF
  chmod +x "$repo/hooks/post-receive"
}

# Sub Commands
# ============

# Prints info about Server using git remotes.
function server {
  local gitremote=nohero
  while getopts "r:" option; do
    case "$option" in
      r) 
        gitremote=${OPTARG}
        ;;
      *)
        exit 1
    esac
  done
  git remote get-url $gitremote 2>/dev/null || \
    nh_errcho "Error: cannot find git remote '$gitremote'."
}

# Takes hostname as argument and setup the server.
function server_init {
  local usage="Usage: nohero sever:init <hostname>"
  if [[ $# -eq 0 ]]; then
    nh_errcho "Error: missing hostname."
    nh_errcho "$usage"
    exit 1
  elif [[ $# -gt 1 ]]; then
    nh_errcho "Error: too many arguments."
    nh_errcho "$usage"
    exit 1
  fi
  remote_do "root@$1" add_user
  nh_echo "We are finished connecting as 'root'."
  remote_do "nohero@$1" \
    apt_update \
    "install_pkg git" \
    "install_pkg imagemagick convert" \
    "install_pkg ghostscript gs" \
    setup_repo
}

# Execute local commands and proxy the remote ones.
if [[ $1 =~ ^(debug|server|server:init)$ ]]; then
  # Call the function if the subcommand is known.
  # Replace `:` by `_` in subcommand name.
  "${1//:/_}" "${@:2}" 
else
  # This part needs to delegate if possible
  nh_errcho "Error: Invalid subcommand '$1'."
  exit 1
fi

